import logging
import os
from aiogram import Bot
from aiogram.types import FSInputFile
from typing import Optional

from bot.database import db
from bot.config.products import get_product_file_info

async def deliver_digital_product(bot: Bot, user_id: int, payload: str) -> None:
    """
    –î–æ—Å—Ç–∞–≤–∫–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫—É —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã.
    –ú–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        payload: –ü–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Å—á–µ—Ç–∞, –æ–±—ã—á–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "order_{order_id}"
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º order_id –∏–∑ payload
        order_id = None
        if payload and payload.startswith("order_"):
            order_id = int(payload.split("_")[1])
            logging.info(f"Extracted order_id from payload: {order_id}")
        else:
            logging.error(f"Invalid payload format: {payload}")
            await bot.send_message(
                user_id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –Ω–∞–ø—Ä—è–º—É—é –ø–æ order_id
        conn = db.sqlite3.connect(db.get_db_path())
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM orders WHERE id = ?', (order_id,))
        order = cursor.fetchone()
        conn.close()
        
        if not order:
            logging.error(f"Order not found by order_id: {order_id}")
            await bot.send_message(
                user_id,
                "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∑–∞–∫–∞–∑–∞
        product_id = order[2]  # –ò–Ω–¥–µ–∫—Å 2 - —ç—Ç–æ product_id –≤ –∫–æ—Ä—Ç–µ–∂–µ –∑–∞–∫–∞–∑–∞
        logging.info(f"Found product_id: {product_id} for order_id: {order_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        product = db.get_product_by_id(product_id)
        if not product:
            logging.error(f"Product not found: {product_id}")
            await bot.send_message(
                user_id,
                "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ —Ç–æ–≤–∞—Ä–∞
        product_file_info = get_product_file_info(product_id)
        logging.info(f"Product file info: {product_file_info}")
        
        if not product_file_info:
            # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.send_message(
                user_id,
                "üéÅ **–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤!**\n\n"
                f"–¢–æ–≤–∞—Ä: **{product[1]}**\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\n"
                f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: `{order_id}`",
                parse_mode="Markdown"
            )
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞
        if product_file_info["type"] == "file":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
            if not product_file_info["file_path"] or not os.path.exists(product_file_info["file_path"]):
                logging.error(f"File not found: {product_file_info['file_path']}")
                await bot.send_message(
                    user_id,
                    "‚ùå –§–∞–π–ª —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞
            await bot.send_message(
                user_id,
                f"üéÅ **–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤!**\n\n"
                f"–¢–æ–≤–∞—Ä: **{product[1]}**\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {product_file_info['description']}\n\n"
                f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: `{order_id}`",
                parse_mode="Markdown"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            file = FSInputFile(product_file_info["file_path"], filename=product_file_info["file_name"])
            await bot.send_document(
                user_id,
                document=file,
                caption=f"üìÅ {product_file_info['file_name']}\n\n"
                        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
            )
            
        elif product_file_info["type"] == "text":
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –ø–æ–¥—Å—Ç–∞–≤–ª—è—è order_id –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            content = product_file_info["content"].format(order_id=order_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            await bot.send_message(
                user_id,
                f"üéÅ **–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤!**\n\n"
                f"–¢–æ–≤–∞—Ä: **{product[1]}**\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {product_file_info['description']}\n\n"
                f"{content}",
                parse_mode="Markdown"
            )
        
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞
            logging.error(f"Unknown product type: {product_file_info['type']}")
            await bot.send_message(
                user_id,
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
            )
        
    except Exception as e:
        logging.error(f"Error delivering product: {e}", exc_info=True)
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ–±–ª–µ–º–µ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π
        await bot.send_message(
            user_id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        ) 