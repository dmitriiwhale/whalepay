import logging
import json
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from bot.database import db
from bot.services import crypto_service
from bot.keyboards import keyboards
from bot.utils.product_manager import deliver_digital_product
from bot.config import TESTNET, SUPPORTED_CURRENCIES, SUPPORT_ENABLED, SUPPORT_WELCOME_MESSAGE

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–π —Å–µ—Ç–∏
    network_text = "—Ç–µ—Å—Ç–æ–≤–æ–π" if TESTNET else "–æ—Å–Ω–æ–≤–Ω–æ–π"
    currencies_text = ", ".join(SUPPORTED_CURRENCIES)
    
    await message.answer(
        f"ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ whalepay!\n\n"
        f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É.\n"
        f"–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ {network_text} —Å–µ—Ç–∏.\n"
        f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã: {currencies_text}",
        reply_markup=keyboards.main_menu_keyboard()
    )

@router.message(Command("update_rates"))
async def cmd_update_rates(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /update_rates –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É ID)
    try:
        await message.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç...")
        await crypto_service.initialize_exchange_rates()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        usd_rate = crypto_service._usd_rate_cache
        crypto_rates = crypto_service._crypto_prices_cache
        
        rates_info = f"‚úÖ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n\n"
        rates_info += f"üíµ USD/RUB: {1/usd_rate:.2f} ‚ÇΩ\n\n"
        
        for currency, price in crypto_rates.items():
            rates_info += f"üí∞ {currency}/USD: ${price:.2f}\n"
        
        await message.answer(rates_info)
    except Exception as e:
        logging.error(f"Error updating rates: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç")

@router.message(Command("test_invoice"))
async def cmd_test_invoice(message: Message, bot: Bot):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é"""
    try:
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –≤–∞–ª—é—Ç—É
        currency = SUPPORTED_CURRENCIES[0]
        amount = str(crypto_service.MIN_AMOUNTS.get(currency, 1.0))
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        bot_info = await bot.get_me()
        bot_username = bot_info.username
        callback_url = f"https://t.me/{bot_username}"
        
        await message.answer(
            f"–°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç:\n"
            f"- –í–∞–ª—é—Ç–∞: {currency}\n"
            f"- –°—É–º–º–∞: {amount}\n"
            f"- Callback URL: {callback_url}\n"
            f"- –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Ç—å: {TESTNET}"
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API
        invoice_data = crypto_service.create_invoice(
            currency,
            amount,
            "–¢–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç",
            "test_payload"
        )
        
        if invoice_data.get('ok'):
            invoice = invoice_data['result']
            invoice_id = invoice['invoice_id']
            pay_url = invoice['pay_url']
            
            await message.answer(
                f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç —Å–æ–∑–¥–∞–Ω!\n\n"
                f"–í–∞–ª—é—Ç–∞: {currency}\n"
                f"–°—É–º–º–∞: {amount}\n"
                f"ID: {invoice_id}\n\n"
                f"URL –¥–ª—è –æ–ø–ª–∞—Ç—ã: {pay_url}"
            )
        else:
            error = invoice_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            error_code = invoice_data.get('code', '–ù–µ—Ç –∫–æ–¥–∞')
            error_name = invoice_data.get('name', '–ù–µ—Ç –∏–º–µ–Ω–∏')
            
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞:\n"
                f"- –ö–æ–¥: {error_code}\n"
                f"- –ò–º—è: {error_name}\n"
                f"- –û–ø–∏—Å–∞–Ω–∏–µ: {error}\n\n"
                f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API: {invoice_data}"
            )
    except Exception as e:
        logging.error(f"Error in test_invoice: {e}", exc_info=True)
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data == "catalog")
async def show_catalog(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"""
    products = db.get_products()
    
    if not products:
        await callback_query.message.edit_text("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç")
        return
    
    await callback_query.message.edit_text(
        "üõç **–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
        reply_markup=keyboards.catalog_keyboard(products),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("product_"))
async def show_product(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞"""
    product_id = int(callback_query.data.split("_")[1])
    product = db.get_product_by_id(product_id)
    
    if not product:
        await callback_query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –≤ USD –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    usd_rate = crypto_service._usd_rate_cache
    price_usd = product[3] * usd_rate  # price_rub * usd_rate
    
    # –ü–∞—Ä—Å–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã
    available_currencies_raw = json.loads(product[5]) if product[5] else []
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª—é—Ç—ã, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Ç–∏
    available_currencies = [c for c in available_currencies_raw if c in SUPPORTED_CURRENCIES]
    
    if not available_currencies:
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ
        available_currencies = SUPPORTED_CURRENCIES
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å —Ü–µ–Ω–∞–º–∏
    price_text = f"üí∞ –¶–µ–Ω–∞: {product[3]} ‚ÇΩ ({price_usd:.2f} USD)\n\n"
    for currency in available_currencies:
        crypto_amount = await crypto_service.calculate_crypto_amount(product[3], currency)
        price_text += f"‚Ä¢ {crypto_amount} {currency}\n"
    
    product_text = (
        f"üì¶ **{product[1]}**\n\n"
        f"üìù {product[2]}\n\n"
        f"{price_text}"
    )
    
    await callback_query.message.edit_text(
        product_text,
        reply_markup=keyboards.product_keyboard(product_id),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("buy_"))
async def select_currency(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
    product_id = int(callback_query.data.split("_")[1])
    product = db.get_product_by_id(product_id)
    
    if not product:
        await callback_query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã
    available_currencies_raw = json.loads(product[5]) if product[5] else []
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª—é—Ç—ã, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Ç–∏
    available_currencies = [c for c in available_currencies_raw if c in SUPPORTED_CURRENCIES]
    
    if not available_currencies:
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ
        available_currencies = SUPPORTED_CURRENCIES
    
    if not available_currencies:
        await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã")
        return
    
    await callback_query.message.edit_text(
        f"üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ç–æ–≤–∞—Ä–∞ **{product[1]}**:",
        reply_markup=keyboards.currency_selection_keyboard(product_id, available_currencies),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("currency_"))
async def process_purchase(callback_query: CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–æ–π"""
    parts = callback_query.data.split("_")
    product_id = int(parts[1])
    selected_currency = parts[2]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Ç–∏
    if selected_currency not in SUPPORTED_CURRENCIES:
        await callback_query.answer(f"–í–∞–ª—é—Ç–∞ {selected_currency} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Ç–∏")
        return
    
    product = db.get_product_by_id(product_id)
    user_id = callback_query.from_user.id
    
    if not product:
        await callback_query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        # Calculate crypto amount
        crypto_amount = await crypto_service.calculate_crypto_amount(product[3], selected_currency)
        logging.info(f"Calculated amount: {crypto_amount} {selected_currency} for {product[3]} RUB")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
        min_amount = crypto_service.MIN_AMOUNTS.get(selected_currency, 0)
        if crypto_amount < min_amount:
            crypto_amount = min_amount
            logging.info(f"Adjusted to minimum amount: {crypto_amount} {selected_currency}")
        
        # Create order in DB
        order_id = db.create_order(user_id, product_id, selected_currency, crypto_amount)
        logging.info(f"Created order ID: {order_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞ –¥–ª—è callback URL
        bot_info = await bot.get_me()
        bot_username = bot_info.username
        await crypto_service.set_bot_username(bot_username)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º payload
        payload = f"order_{order_id}"
        
        # Create invoice in Crypto Pay
        invoice_data = crypto_service.create_invoice(
            selected_currency,
            str(crypto_amount),
            f"–ü–æ–∫—É–ø–∫–∞: {product[1]}",
            payload
        )
        
        if invoice_data.get('ok'):
            invoice = invoice_data['result']
            invoice_id = invoice['invoice_id']
            pay_url = invoice['pay_url']
            
            # Update order with invoice ID
            db.update_order_invoice(order_id, invoice_id)
            
            # Show payment info
            usd_rate = crypto_service._usd_rate_cache
            price_usd = product[3] * usd_rate
            
            await callback_query.message.edit_text(
                f"üí≥ **–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω!**\n\n"
                f"üì¶ –¢–æ–≤–∞—Ä: {product[1]}\n"
                f"üí∞ –ö –æ–ø–ª–∞—Ç–µ: {crypto_amount} {selected_currency}\n"
                f"üíµ –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç: {product[3]} ‚ÇΩ / {price_usd:.2f} USD\n"
                f"üÜî –°—á–µ—Ç: `{invoice_id}`\n\n"
                f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–û–ø–ª–∞—Ç–∏—Ç—å\" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ.\n"
                f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\".",
                reply_markup=keyboards.payment_keyboard(pay_url, str(invoice_id)),
                parse_mode="Markdown"
            )
        else:
            error_msg = invoice_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            error_code = invoice_data.get('code', '–ù–µ—Ç –∫–æ–¥–∞')
            error_name = invoice_data.get('name', '–ù–µ—Ç –∏–º–µ–Ω–∏')
            logging.error(f"Failed to create invoice: {error_code} {error_name} - {error_msg}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏
            if "asset" in str(error_msg).lower() or "currency" in str(error_msg).lower():
                await callback_query.message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞: –í–∞–ª—é—Ç–∞ {selected_currency} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            elif "amount" in str(error_msg).lower():
                await callback_query.message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ ({crypto_amount} {selected_currency}).\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            elif "paid_btn_url" in str(error_name).lower():
                await callback_query.message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å URL –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            else:
                await callback_query.message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞: {error_name} ({error_code})\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            
    except Exception as e:
        logging.error(f"Error in process_purchase: {e}", exc_info=True)
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É."
        )

@router.callback_query(F.data.startswith("check_"))
async def check_payment(callback_query: CallbackQuery, bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    invoice_id = callback_query.data.split("_")[1]
    logging.info(f"Checking payment for invoice_id: {invoice_id}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞
        invoice_data = crypto_service.check_invoice(invoice_id)
        logging.info(f"Invoice data: {invoice_data}")
        
        if invoice_data.get('ok') and invoice_data['result']['items']:
            invoice = invoice_data['result']['items'][0]
            logging.info(f"Invoice status: {invoice['status']}, payload: {invoice['payload']}")
            
            if invoice['status'] == 'paid':
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
                db.update_order_status(int(invoice_id), "paid")
                logging.info(f"Updated order status to paid for invoice_id: {invoice_id}")
                
                await callback_query.message.edit_text(
                    "‚úÖ **–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!**\n\n"
                    "üì¶ –í–∞—à —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ",
                    reply_markup=keyboards.back_to_catalog_keyboard(),
                    parse_mode="Markdown"
                )
                
                # –î–æ—Å—Ç–∞–≤–ª—è–µ–º —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç–æ–≤–∞—Ä
                await deliver_digital_product(bot, callback_query.from_user.id, invoice['payload'])
                
            else:
                await callback_query.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª")
        else:
            logging.error(f"Failed to check invoice: {invoice_data}")
            await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞")
            
    except Exception as e:
        logging.error(f"Error checking payment: {e}", exc_info=True)
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")

@router.callback_query(F.data == "balance")
async def show_balance(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞ Crypto Pay"""
    try:
        balance_data = crypto_service.get_balance()
        
        if balance_data.get('ok'):
            balances = balance_data['result']
            
            balance_text = "üí∞ **–ë–∞–ª–∞–Ω—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:**\n\n"
            for balance in balances:
                balance_text += f"{balance['currency_code']}: {balance['available']} ({balance['onhold']} –≤ —Ö–æ–ª–¥–µ)\n"
            
            await callback_query.message.edit_text(
                balance_text,
                reply_markup=keyboards.main_menu_keyboard(),
                parse_mode="Markdown"
            )
        else:
            await callback_query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å")
            
    except Exception as e:
        logging.error(f"Error getting balance: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback_query: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–π —Å–µ—Ç–∏
    network_text = "—Ç–µ—Å—Ç–æ–≤–æ–π" if TESTNET else "–æ—Å–Ω–æ–≤–Ω–æ–π"
    currencies_text = ", ".join(SUPPORTED_CURRENCIES)
    
    await callback_query.message.edit_text(
        f"ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto Store!\n\n"
        f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É.\n"
        f"–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ {network_text} —Å–µ—Ç–∏.\n"
        f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã: {currencies_text}",
        reply_markup=keyboards.main_menu_keyboard()
    )

@router.callback_query(F.data == "support")
async def support_button(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    from bot.handlers.support_handlers import SupportStates
    
    if not SUPPORT_ENABLED:
        await callback_query.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback_query.message.edit_text(
        SUPPORT_WELCOME_MESSAGE,
        reply_markup=keyboards.support_keyboard()
    )
    await state.set_state(SupportStates.waiting_for_message)
    await callback_query.answer() 